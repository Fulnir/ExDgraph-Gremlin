{"shell":true,"revision":"e4379554df2f935b7b8c6e702b0545680956b2bf","objects":[{"type":null,"source":"lib/exdgraph_gremlin.ex:2","object_type":"ModuleObject","moduledoc":"Experimental gremlin support functions [![Build Status](https://semaphoreci.com/api/v1/fulnir/exdgraph/branches/master/badge.svg)](https://semaphoreci.com/fulnir/exdgraph)\n\nSee ![Traversal Steps](http://tinkerpop.apache.org/docs/current/reference/#graph-traversal-steps)\n\n\n![Gremlin](http://tinkerpop.apache.org/docs/current/images/gremlin-logo.png)\n\n# Gremlin graph support\n\nIn this case, only elixir functions which simulate gremlin.\n\n## Gremlin Steps\n\n### AddVertex Step\nThe `addV`-step is used to add vertices to the graph ([addV step](http://tinkerpop.apache.org/docs/current/reference/#addvertex-step))\n\n\nThe following Gremlin statement inserts a \"toon\" vertex into the graph\n```\ngremlin> g.addV('toon')\n==>v[13]\n```\n\nAnd now with **Elixir**.\n```elixir\n{:ok, channel} = GRPC.Stub.connect(Application.get_env(:exdgraph, :dgraphServerGRPC))\n{:ok, graph} = Graph.new(channel)\n\ngraph\n|> addV(Toon)\n```\nThe first lines create the `Graph` and connect it to `dgraph`. These are not listed in all samples.\n\n### AddProperty Step\nThe `property`-step is used to add properties to the elements of the graph. ([property step](http://tinkerpop.apache.org/docs/current/reference/#addproperty-step))\n\nThe following Gremlin statement inserts the \"*Bugs Bunny*\" vertex into the graph\n```\ngremlin> g.addV('toon').property('name','Bugs Bunny').property('type','Toon')\n==>v[13]\n```\n\nAnd now with **Elixir**.\n```elixir\n{:ok, channel} = GRPC.Stub.connect(Application.get_env(:exdgraph, :dgraphServerGRPC))\n{:ok, graph} = Graph.new(channel)\n\ngraph\n|> addV(Toon)\n|> property(\"name\", \"Bugs Bunny\")\n|> property(\"type\", \"Toon\")\n```\n\n### AddEdge Step\nThe `addE`-step is used to add an edge between two vertices  ([addE step](http://tinkerpop.apache.org/docs/current/reference/#addedge-step)) \n\n\n```elixir\nmarko =\n  graph\n  |> addV(Person)\n  |> property(\"name\", \"Makro\")\n\npeter =\n  graph\n  |> addV(Person)\n  |> property(\"name\", \"Peter\")\n\n# gremlin> g.addE('knows').from(marko).to(peter)\ngraph\n|> addE(\"knows\")\n|> from(marko)\n|> to(peter)\n```\n\n###  V Step\n\n\n```elixir\nedwin =\n  graph\n  |> addV(Person)\n  |> property(\"name\", \"Edwin\")\n# Get a vertex with the unique identifier.\nvertex =\n  graph\n  |> v(edwin.uid)\n```\n\n","module":"Elixir.ExdgraphGremlin","id":"ExdgraphGremlin"},{"type":null,"source":"lib/edge.ex:2","object_type":"ModuleObject","moduledoc":"And edge for gremlin\n","module":"Elixir.ExdgraphGremlin.Edge","id":"ExdgraphGremlin.Edge"},{"type":null,"source":"lib/graph.ex:2","object_type":"ModuleObject","moduledoc":"The graph for gremlin\n","module":"Elixir.ExdgraphGremlin.Graph","id":"ExdgraphGremlin.Graph"},{"type":"exception","source":"lib/error.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.ExdgraphGremlin.GremlinError","id":"ExdgraphGremlin.GremlinError"},{"type":null,"source":"lib/gremlin_low_level.ex:2","object_type":"ModuleObject","moduledoc":"Low level functions\n","module":"Elixir.ExdgraphGremlin.LowLevel","id":"ExdgraphGremlin.LowLevel"},{"type":null,"source":"lib/status.ex:3","object_type":"ModuleObject","moduledoc":"","module":"Elixir.ExdgraphGremlin.Status","id":"ExdgraphGremlin.Status"},{"type":null,"source":"lib/vertex.ex:2","object_type":"ModuleObject","moduledoc":"The vertex for gremlin\n","module":"Elixir.ExdgraphGremlin.Vertex","id":"ExdgraphGremlin.Vertex"},{"type":"def","source":"lib/exdgraph_gremlin.ex:195","signature":[["graph_or_vertex_in",[],null],["predicate",[],null]],"object_type":"FunctionObject","name":"addE","module_id":"ExdgraphGremlin","id":"addE/2","doc":"AddEdge Step\nhttp://tinkerpop.apache.org/docs/current/reference/#addedge-step\n","arity":2},{"type":"def","source":"lib/exdgraph_gremlin.ex:223","signature":[["graph_or_vertex_in",[],null],["predicate",[],null]],"object_type":"FunctionObject","name":"addE!","module_id":"ExdgraphGremlin","id":"addE!/2","doc":"Similar to `addE/2`, but raises an `Error` if the dgraph mutation is not possible.\n","arity":2},{"type":"def","source":"lib/exdgraph_gremlin.ex:102","signature":[["graph",[],null],["struct_type",[],null]],"object_type":"FunctionObject","name":"addV","module_id":"ExdgraphGremlin","id":"addV/2","doc":"## AddVertex Step\nThe addV()-step is used to add vertices to the graph\nhttp://tinkerpop.apache.org/docs/current/reference/#addvertex-step\n\n### Gremlin\n    gremlin> g.addV('toon').property('name','Bugs Bunny').property('type','Toon')\n    ==>v[13]\n\nThe `Graph` with a channel and a struct type are needed.\nReturns `{:ok, vertex}` if the dgraph mutation has success, or `{:error, error}` if not.\nIf error then, pass it through to the end of the traversal.\n\n## Examples\n\n    iex> conn = ExDgraph.conn()\n    ...> {:ok, graph} = Graph.new(conn)\n    ...> {:ok, vertex} = graph\n    ...> |> addV(Toon)\n    ...> |> property(\"name\", \"Bugs Bunny\")\n    ...> |> property(\"type\", \"Toon\")\n    ...> vertex.vertex_struct.name\n    \"Bugs Bunny\"\n\n","arity":2},{"type":"def","source":"lib/exdgraph_gremlin.ex:145","signature":[["graph",[],null],["struct_type",[],null]],"object_type":"FunctionObject","name":"addV!","module_id":"ExdgraphGremlin","id":"addV!/2","doc":"Similar to `addV/2`, but raises an `Error` if the dgraph mutation is not possible.\n","arity":2},{"type":"def","source":"lib/exdgraph_gremlin.ex:291","signature":[["edge_in",[],null]],"object_type":"FunctionObject","name":"bothV","module_id":"ExdgraphGremlin","id":"bothV/1","doc":"both incoming and outgoing vertices of the edge\n","arity":1},{"type":"def","source":"lib/exdgraph_gremlin.ex:231","signature":[["edge_in",[],null],["from",[],null]],"object_type":"FunctionObject","name":"from","module_id":"ExdgraphGremlin","id":"from/2","doc":"AddEdge Step\nhttp://tinkerpop.apache.org/docs/current/reference/#addedge-step\n","arity":2},{"type":"def","source":"lib/exdgraph_gremlin.ex:279","signature":[["edge_in",[],null]],"object_type":"FunctionObject","name":"inV","module_id":"ExdgraphGremlin","id":"inV/1","doc":"the incoming head vertex of the edge\n","arity":1},{"type":"def","source":"lib/exdgraph_gremlin.ex:355","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"ok!","module_id":"ExdgraphGremlin","id":"ok!/1","doc":"Returns the result or fire a error exception.\n    graph\n    |> addV(Toon)\n    |> property(\"name\", \"Bugs Bunny\")\n    |> ok!\n","arity":1},{"type":"def","source":"lib/exdgraph_gremlin.ex:267","signature":[["edge_in",[],null]],"object_type":"FunctionObject","name":"outV","module_id":"ExdgraphGremlin","id":"outV/1","doc":"the outgoing tail vertex of the edge\nhttps://github.com/tinkerpop/gremlin/wiki/Basic-Graph-Traversals\n","arity":1},{"type":"def","source":"lib/exdgraph_gremlin.ex:155","signature":[["vertex_in",[],null],["predicate",[],null],["object",[],null]],"object_type":"FunctionObject","name":"property","module_id":"ExdgraphGremlin","id":"property/3","doc":"AddProperty Step\nhttp://tinkerpop.apache.org/docs/current/reference/#addproperty-step\n","arity":3},{"type":"def","source":"lib/exdgraph_gremlin.ex:180","signature":[["vertex_in",[],null],["predicate",[],null],["object",[],null]],"object_type":"FunctionObject","name":"property!","module_id":"ExdgraphGremlin","id":"property!/3","doc":"Similar to `propertyV/3`, but raises an `Error` if the dgraph mutation is not possible.\n","arity":3},{"type":"def","source":"lib/exdgraph_gremlin.ex:246","signature":[["edge_in",[],null],["to",[],null]],"object_type":"FunctionObject","name":"to","module_id":"ExdgraphGremlin","id":"to/2","doc":"AddEdge Step\nhttp://tinkerpop.apache.org/docs/current/reference/#addedge-step\n","arity":2},{"type":"def","source":"lib/exdgraph_gremlin.ex:303","signature":[["graph",[],null]],"object_type":"FunctionObject","name":"v","module_id":"ExdgraphGremlin","id":"v/1","doc":"V Step\n\nThe vertex iterator for the graph. Utilize this to iterate through all the vertices in the graph. \nUse with care on large graphs unless used in combination with a key index lookup.\n\n### Get all the vertices in the Graph\ngremlin> g.V()\n\n### Get a vertex with the unique identifier of \"1\".\ngremlin> g.V(1)\n\n### Get the value of the name property on vertex with the unique identifier of \"1\".\ngremlin> g.V(1).values('name')\n\n### \n","arity":1},{"type":"def","source":"lib/exdgraph_gremlin.ex:326","signature":[["graph",[],null],["uid",[],null]],"object_type":"FunctionObject","name":"v","module_id":"ExdgraphGremlin","id":"v/2","doc":"Get a vertex with the unique identifier.\n\nReturns a `Vertex`. The `Graph` with a channel and a `uid` are needed.\n\n## Examples\n\n    {:ok, channel} = GRPC.Stub.connect(Application.get_env(:exdgraph, :dgraphServerGRPC))\n    {:ok, graph} = Graph.new(channel)\n    graph\n\n","arity":2},{"type":"def","source":"lib/exdgraph_gremlin.ex:351","signature":[["vertex",[],null],["predicate",[],null]],"object_type":"FunctionObject","name":"values","module_id":"ExdgraphGremlin","id":"values/2","doc":null,"arity":2},{"type":"def","source":"lib/edge.ex:9","signature":[],"object_type":"FunctionObject","name":"__struct__","module_id":"ExdgraphGremlin.Edge","id":"__struct__/0","doc":"The edge properties.\nReserved for cache and other\nfrom => out => tail, to => in => head\nIn edges of a vertex are connected to in vertex of a edge.\n","arity":0},{"type":"def","source":"lib/edge.ex:20","signature":[["the_graph",[],null],["predicate",[],null]],"object_type":"FunctionObject","name":"new","module_id":"ExdgraphGremlin.Edge","id":"new/2","doc":"Creates a new graph\n","arity":2},{"type":"def","source":"lib/graph.ex:9","signature":[],"object_type":"FunctionObject","name":"__struct__","module_id":"ExdgraphGremlin.Graph","id":"__struct__/0","doc":"The graph properties.\nReserved for a cache (gen_server) and other\n","arity":0},{"type":"def","source":"lib/graph.ex:19","signature":[["conn",[],null]],"object_type":"FunctionObject","name":"new","module_id":"ExdgraphGremlin.Graph","id":"new/1","doc":"Creates a new graph\n","arity":1},{"type":"def","source":"lib/error.ex:2","signature":[["msg",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"ExdgraphGremlin.GremlinError","id":"exception/1","doc":null,"arity":1},{"type":"def","source":"lib/error.ex:5","signature":[["status",[],null],["message",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"ExdgraphGremlin.GremlinError","id":"exception/2","doc":null,"arity":2},{"type":"def","source":"lib/error.ex:2","signature":[["exception",[],null]],"object_type":"FunctionObject","name":"message","module_id":"ExdgraphGremlin.GremlinError","id":"message/1","doc":null,"arity":1},{"type":"def","source":"lib/gremlin_low_level.ex:297","signature":[["conn",[],null]],"object_type":"FunctionObject","name":"check_schema","module_id":"ExdgraphGremlin.LowLevel","id":"check_schema/1","doc":null,"arity":1},{"type":"def","source":"lib/gremlin_low_level.ex:35","signature":[["graph",[],null],["subject_uid",[],null],["predicate",[],null],["object_uid",[],null]],"object_type":"FunctionObject","name":"mutate_edge","module_id":"ExdgraphGremlin.LowLevel","id":"mutate_edge/4","doc":"Creates the nquad and send it as mutaion request with a commit\n","arity":4},{"type":"def","source":"lib/gremlin_low_level.ex:197","signature":[["conn",[],null],["a_map",[],null]],"object_type":"FunctionObject","name":"mutate_map","module_id":"ExdgraphGremlin.LowLevel","id":"mutate_map/2","doc":"Returns a new node. {:ok, node}\n","arity":2},{"type":"def","source":"lib/gremlin_low_level.ex:21","signature":[["graph",[],null],["predicate",[],null],["object",[],null]],"object_type":"FunctionObject","name":"mutate_node","module_id":"ExdgraphGremlin.LowLevel","id":"mutate_node/3","doc":"Creates the nquad and send it as mutaion request with a commit\n","arity":3},{"type":"def","source":"lib/gremlin_low_level.ex:28","signature":[["graph",[],null],["subject_uid",[],null],["predicate",[],null],["object",[],null]],"object_type":"FunctionObject","name":"mutate_node","module_id":"ExdgraphGremlin.LowLevel","id":"mutate_node/4","doc":"Creates the nquad and send it as mutaion request with a commit\n","arity":4},{"type":"def","source":"lib/gremlin_low_level.ex:166","signature":[["conn",[],null],["a_struct",[],null]],"object_type":"FunctionObject","name":"mutate_struct","module_id":"ExdgraphGremlin.LowLevel","id":"mutate_struct/2","doc":"Create first a map of the struct and add the struct_name as\n:vertex_type value to the map\n\n## Examples\n\n    iex> person = %Person{person_id: \"LeonardoDaVinci\", name: \"Leonardo Da Vinci\"}\n    ...> {status, _} = ExdgraphGremlin.LowLevel.mutate_struct(conn(), person)\n    ...> status\n    :ok\n\nReturns a new node. {:ok, node} or {:error, \"The value is not a struct\"} if\nnode_struct is not a struct\n","arity":2},{"type":"def","source":"lib/gremlin_low_level.ex:9","signature":[["graph",[],null],["nquad",[],null]],"object_type":"FunctionObject","name":"mutate_with_commit","module_id":"ExdgraphGremlin.LowLevel","id":"mutate_with_commit/2","doc":"Creates a mutation request with a commit_now and send it to dgraph.\n","arity":2},{"type":"def","source":"lib/gremlin_low_level.ex:159","signature":[["graph",[],null],["predicate",[],null],["object",[],null]],"object_type":"FunctionObject","name":"query_eq_vertex!","module_id":"ExdgraphGremlin.LowLevel","id":"query_eq_vertex!/3","doc":null,"arity":3},{"type":"def","source":"lib/gremlin_low_level.ex:131","signature":[["graph",[],null],["predicate",[],null],["object",[],null],["display",[],null]],"object_type":"FunctionObject","name":"query_eq_vertex!","module_id":"ExdgraphGremlin.LowLevel","id":"query_eq_vertex!/4","doc":null,"arity":4},{"type":"def","source":"lib/gremlin_low_level.ex:42","signature":[["graph",[],null],["vertex_uid",[],null]],"object_type":"FunctionObject","name":"query_vertex","module_id":"ExdgraphGremlin.LowLevel","id":"query_vertex/2","doc":"\n","arity":2},{"type":"def","source":"lib/gremlin_low_level.ex:119","signature":[["graph",[],null],["search_type",[],null],["predicate",[],null],["object",[],null]],"object_type":"FunctionObject","name":"query_vertex","module_id":"ExdgraphGremlin.LowLevel","id":"query_vertex/4","doc":null,"arity":4},{"type":"def","source":"lib/gremlin_low_level.ex:73","signature":[["graph",[],null],["search_type",[],null],["predicate",[],null],["object",[],null],["display",[],null]],"object_type":"FunctionObject","name":"query_vertex","module_id":"ExdgraphGremlin.LowLevel","id":"query_vertex/5","doc":"\n","arity":5},{"type":"def","source":"lib/gremlin_low_level.ex:123","signature":[["graph",[],null],["search_type",[],null],["predicate",[],null],["object",[],null]],"object_type":"FunctionObject","name":"query_vertex!","module_id":"ExdgraphGremlin.LowLevel","id":"query_vertex!/4","doc":"Similar to `query_vertex/3`, but raises an `Error` if the dgraph query is not possible.\n","arity":4},{"type":"def","source":"lib/gremlin_low_level.ex:111","signature":[["graph",[],null],["search_type",[],null],["predicate",[],null],["object",[],null],["display",[],null]],"object_type":"FunctionObject","name":"query_vertex!","module_id":"ExdgraphGremlin.LowLevel","id":"query_vertex!/5","doc":"Similar to `query_vertex/4`, but raises an `Error` if the dgraph query is not possible.\n","arity":5},{"type":"def","source":"lib/status.ex:6","signature":[],"object_type":"FunctionObject","name":"ok","module_id":"ExdgraphGremlin.Status","id":"ok/0","doc":"Not an error; returned on success.\n","arity":0},{"type":"def","source":"lib/vertex.ex:8","signature":[],"object_type":"FunctionObject","name":"__struct__","module_id":"ExdgraphGremlin.Vertex","id":"__struct__/0","doc":"The vertex properties.\nReserved for cache and other\n","arity":0},{"type":"def","source":"lib/vertex.ex:16","signature":[["the_graph",[],null],["the_uid",[],null],["the_struct",[],null]],"object_type":"FunctionObject","name":"new","module_id":"ExdgraphGremlin.Vertex","id":"new/3","doc":"Creates a new graph\n","arity":3}],"language":"elixir","git_repo_url":"origin","client_version":"0.5.6","client_name":"inch_ex","branch_name":"master","args":[]}